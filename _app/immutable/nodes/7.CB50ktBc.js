import{t as k,e as U,a as v,r as Et,b as be,c as tt}from"../chunks/CTCU8MtZ.js";import{i as St}from"../chunks/Nm97N5gH.js";import{p as qt,m as rt,g as e,o as kt,l as at,a as Mt,t as F,b as Rt,c as G,$ as Pt,d,s as r,e as g,r as f,h as X,f as oe,j as Ee,i as Ft,n as ie}from"../chunks/BRwduGv0.js";import{h as Ot,s as O}from"../chunks/BASCv1CT.js";import{i as M}from"../chunks/CttsxjpS.js";import{r as $e,e as st,s as Ct,i as Kt,a as Tt}from"../chunks/WmSvwHMj.js";import{b as ye}from"../chunks/D_xwPvKz.js";import{b as Dt}from"../chunks/Bye-va2A.js";import{s as Se}from"../chunks/nPbPBRHT.js";import{G as Be}from"../chunks/DFcTbYjU.js";import{r as Gt,c as jt}from"../chunks/BqI594Fa.js";import{F as Jt}from"../chunks/Ch1WBRTM.js";var Ut=k('<p class="mt-1 text-xs text-red-600"> </p>'),Lt=k('<div class="my-4 p-3 border border-yellow-300 bg-yellow-50 rounded"><label for="gemini-api-key" class="block text-sm font-medium text-yellow-800">Enter Gemini API Key:</label> <div class="mt-1 flex rounded-md shadow-sm"><input type="password" id="gemini-api-key" class="flex-1 block w-full rounded-none rounded-l-md border-gray-300 px-2 py-1 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" placeholder="Paste your API key here"> <button type="button" class="inline-flex items-center rounded-r-md border border-l-0 border-gray-300 bg-gray-50 px-3 text-sm text-gray-500 hover:bg-gray-100">Save Key</button></div> <!></div>'),Qt=k('<div class="mt-4 p-3 bg-red-100 text-red-700 border border-red-300 rounded"> </div>'),zt=k('<div class="mt-4 p-3 bg-green-100 text-green-700 border border-green-300 rounded"> </div>'),Bt=k('<span class="mr-1"> </span> <input type="number" step="0.1" min="0.1" class="w-16 p-1 border border-gray-300 rounded text-sm">',1),Vt=k(' <span class="text-xs text-blue-500">(New)</span>',1),Ht=k('<!> <span class="text-xs text-yellow-600 ml-2">Processing...</span>',1),Xt=k(' <span class="text-xs text-blue-500">(New)</span>',1),Yt=k('<!> <span class="text-xs text-red-600 ml-1">Error!</span> <button type="button" class="ml-1 px-1 py-0 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200" title="Retry processing this ingredient">ðŸ”„ Retry</button>',1),Wt=k('<span class="mr-1"> </span> <input type="number" step="0.1" min="0.1" class="w-16 p-1 border border-gray-300 rounded text-sm" title="Edit multiplier"> <span class="text-xs text-gray-500 ml-2">(Matched)</span>',1),Zt=k('<input type="number" step="1" min="1" class="w-16 p-1 border border-gray-300 rounded text-sm mr-1" title="Edit quantity"> <select class="p-1 border border-gray-300 rounded text-sm mr-1" title="Edit unit"><option>g</option><option>dl</option><option>pcs</option><option>portion</option></select> <span> </span> <span class="text-xs text-blue-500 ml-1">(New - Manual)</span>',1),er=k('<span class="mr-1"> </span> <input type="number" step="0.1" min="0.1" class="w-16 p-1 border border-gray-300 rounded text-sm" title="Edit multiplier"> <span class="text-xs text-blue-500 ml-1">(New - LLM)</span>',1),tr=k('<li><div class="flex items-center justify-between"><div class="flex-grow mr-2"><!></div> <button class="text-red-500 hover:text-red-700 disabled:opacity-50 disabled:cursor-not-allowed ml-4 flex-shrink-0" title="Delete Ingredient"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg></button></div></li>'),rr=k('<p class="text-xs text-gray-500 italic mt-1">Loading food items...</p>'),ar=k('<li class="px-3 py-2 hover:bg-gray-100 cursor-pointer text-sm"> <span class="text-xs text-gray-500 ml-1"> </span></li>'),sr=k('<li class="px-3 py-2 hover:bg-blue-100 cursor-pointer text-sm text-blue-600 italic"> </li>'),nr=k('<li class="px-3 py-2 text-sm text-gray-500 italic">Start typing to search...</li>'),or=k('<ul class="absolute z-10 w-full bg-white border border-gray-300 rounded mt-1 max-h-60 overflow-y-auto shadow-lg"><!> <!> <!></ul>'),ir=k('<div class="mt-6 p-3 border rounded bg-gray-100"><h2 class="text-lg font-semibold mb-2"> </h2> <div class="flex flex-wrap items-center gap-x-1 gap-y-1 text-xs"><span class="bg-blue-200 text-blue-900 px-1 py-0.5 rounded-md font-medium"> </span> <span class="bg-green-200 text-green-900 px-1 py-0.5 rounded-md font-medium"> <span class="text-green-700 text-[0.65rem]">PFC</span></span> <span class="bg-yellow-200 text-yellow-900 px-1 py-0.5 rounded-md font-medium"> <span class="text-yellow-700 text-[0.65rem]">FiS</span></span> <span class="bg-orange-200 text-orange-900 px-1 py-0.5 rounded-md font-medium"> <span class="text-orange-700 text-[0.65rem]">MPS</span></span> <span class="bg-orange-200 text-orange-900 px-1 py-0.5 rounded-md font-medium" title="Omega-6:Omega-3 Ratio"> <span class="text-orange-700 text-[0.65rem]">6:3</span></span> <span class="bg-purple-200 text-purple-900 px-1 py-0.5 rounded-md font-medium"> </span></div></div>'),lr=k('<button class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed"><!></button>'),ur=k('<button class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed"><!></button>'),dr=k('<div class="mt-6"><h2 class="text-xl font-semibold mb-3">Generated Ingredients</h2> <p class="text-sm text-gray-600 mb-3">Review the list below. Remove any unwanted items before approving.</p> <ul class="space-y-2"></ul> <div class="mt-4 pt-4 border-t relative"><label for="manualAdd" class="block text-sm font-medium text-gray-700 mb-1">Add Ingredient Manually</label> <input type="text" id="manualAdd" class="w-full p-2 border border-gray-300 rounded" placeholder="Search existing or type new name..."> <!> <!></div> <!> <div class="mt-4 flex space-x-3"><!> <button class="bg-gray-300 hover:bg-gray-400 text-black py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed">Cancel</button></div></div>'),mr=k(`<div class="container mx-auto p-4 max-w-3xl"><h1 class="text-2xl font-bold mb-4">Generate Recipe from Name</h1> <div class="mb-4"><label for="recipeName" class="block text-sm font-medium text-gray-700 mb-1">Recipe Name</label> <input type="text" id="recipeName" class="w-full p-2 border border-gray-300 rounded" placeholder="e.g., Chicken Stir-fry"></div> <div class="mb-4"><label for="userComment" class="block text-sm font-medium text-gray-700 mb-1">Optional Comment</label> <textarea id="userComment" rows="3" class="w-full p-2 border border-gray-300 rounded" placeholder="Any specific notes, like 'low carb version' or 'serves 2'"></textarea></div> <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed"><!></button> <!> <!> <!> <!></div>`);function $r(nt,ot){qt(ot,!1);const Ve=G(),Te=G();function Oe(t,a){if(!t)throw new Error(a)}let Ae=G(""),Ne=G(""),Ce=[],De,n=G([]),j=G(!1),R=G(!1),pe=G(!1),V=G(""),le=G([]),he=G(!1);const Ge=["protein","fat","carbs","fibers","sugar","mufa","pufa","sfa","gl","omega3","omega6"];let I=G({count:0});Ge.forEach(t=>rt(I,e(I)[t]=0));let $=G(""),ue=G(""),de="",xe=G(!1),qe=G("");function Y(){const t={count:0};Ge.forEach(i=>t[i]=0);let a=0;for(const i of e(n))if(i.status==="done"&&i.nutrition){a++;const o=i.nutrition,c=i.multiplier??1,m=(h,b)=>(h||0)+(b||0);t.protein=m(t.protein,(o.protein||0)*c),t.fat=m(t.fat,(o.fat||0)*c),t.carbs=m(t.carbs,(o.carbs||0)*c),t.fibers=m(t.fibers,(o.fibers||0)*c),t.sugar=m(t.sugar,(o.sugar||0)*c),t.mufa=m(t.mufa,(o.mufa||0)*c),t.pufa=m(t.pufa,(o.pufa||0)*c),t.sfa=m(t.sfa,(o.sfa||0)*c),t.gl=m(t.gl,(o.gl||0)*c),t.omega3=m(t.omega3,(o.omega3||0)*c),t.omega6=m(t.omega6,(o.omega6||0)*c)}t.count=a;for(const i of Ge)t[i]=Math.round(t[i]);const l=Gt(t.omega6,t.omega3);t.ratio=l,r(I,t)}kt(async()=>{lt(),await it()});async function it(){r(pe,!0),r($,"");try{const{data:t,error:a}=await Se.from("food_items").select("id, name, serving_qty, serving_unit");if(a)throw a;Ce=t||[],De=new Jt(Ce,{keys:["name"],includeScore:!0,threshold:.4})}catch(t){r($,`Error fetching food items: ${t.message}`),console.error(t)}finally{r(pe,!1)}}function lt(){typeof window<"u"&&(de=localStorage.getItem("geminiApiKey")||"",r(qe,de))}function ut(){typeof window<"u"&&(localStorage.setItem("geminiApiKey",e(qe)),de=e(qe),r(xe,!1),r($,""),alert("API Key saved successfully!"))}async function dt(){var t,a,l,i,o,c;r(j,!0),r($,""),r(ue,""),r(n,[]),Y();try{if(!de){r($,"Gemini API Key is missing. Please enter and save it below."),r(xe,!0),r(j,!1);return}const m=Ce.map(S=>`ID: ${S.id}, Name: ${S.name}, Serving: ${S.serving_qty||"N/A"} ${S.serving_unit||""}`).join(`
`),b=`Given the recipe name "${e(Ae)}" ${e(Ne)?`and comment "${e(Ne)}"`:""}, identify the main ingredients and their quantities (in grams 'g' or deciliters 'dl').
Focus *only* on ingredients that significantly contribute to the recipe's total calories and macronutrient profile (protein, fat, carbohydrates). Exclude small amounts of herbs, spices, flavorings (like garlic, salt, pepper, small amounts of chili), water, and other non-caloric or very low-calorie items.
Compare these ingredients against the following list of existing food items:
--- EXISTING ITEMS ---
${m}
--- END EXISTING ITEMS ---

If an ingredient closely matches an existing item by name, use its ID and estimate a multiplier relative to its defined serving size.
If an ingredient does not match, provide its name (use simple, common names like "Flour" instead of specific types which are almost the same), quantity, and unit ('g' or 'dl'). Prioritize 'g' for solids and 'dl' for liquids where appropriate.

Return the result ONLY as a valid JSON array matching this structure, with no surrounding text or explanations:
[
        { "name": string, "quantity": number, "unit": "g" | "dl" }, // For new items
        { "id": number, "multiplier": number } // For matched existing items
      ]`,A=((o=(i=(l=(a=(t=(await new Be({apiKey:de}).models.generateContent({model:"gemini-2.5-pro-preview-03-25",contents:[{role:"user",parts:[{text:b}]}]})).candidates)==null?void 0:t[0])==null?void 0:a.content)==null?void 0:l.parts)==null?void 0:i[0])==null?void 0:o.text)||"";if(!A)throw new Error("AI response did not contain text.");console.log("Raw Gemini Response (List):",A);let K;try{const S=/.*(\[[\s\S]*\])/s,C=A.match(S);if(!C||!C[1])throw new Error("AI response did not contain a recognizable JSON array structure.");K=JSON.parse(C[1])}catch(S){throw console.error("Failed to parse extracted JSON:",S,`
Original Response Text:`,A),new Error("AI response contained JSON, but it was invalid or couldn't be extracted correctly.")}const J=[];for(const S of K)if(S.id){const C=Ce.find(y=>y.id===S.id);J.push({id:S.id,multiplier:S.multiplier,matchedName:C?C.name:`Unknown Item (ID: ${S.id})`,serving_qty:C?C.serving_qty:null,serving_unit:C?C.serving_unit:null,status:"idle",nutrition:null})}else{const C=S.quantity,y=S.unit,u=C/((y==="dl"?"dl":"g")==="dl"?1:100);J.push({name:S.name,quantity:C,unit:y,multiplier:u,status:"idle",isManuallyAdded:!1,nutrition:null})}r(n,J),Y()}catch(m){(c=m.message)!=null&&c.includes("API key not valid")?(r($,"Gemini API Key is invalid. Please check and save it again."),r(xe,!0)):r($,`Error generating list: ${m.message}`),console.error(m)}finally{r(j,!1)}}function mt(t){e(n).splice(t,1),r(n,e(n)),Y()}function ct(){if(e(V).trim()===""){r(le,[]),r(he,!1);return}De?r(le,De.search(e(V).trim())):r(le,[]),r(he,!0)}async function ft(t){r(V,""),r(le,[]),r(he,!1),r(pe,!0),r($,"");try{const{data:a,error:l}=await Se.from("food_items").select("*").eq("id",t.id).single();if(l)throw l;if(!a)throw new Error(`Details not found for item ID ${t.id}`);r(n,[...e(n),{id:a.id,multiplier:1,matchedName:a.name,serving_qty:a.serving_qty,serving_unit:a.serving_unit,status:"done",nutrition:{protein:a.protein,fat:a.fat,carbs:a.carbs,fibers:a.fibers,sugar:a.sugar,mufa:a.mufa,pufa:a.pufa,sfa:a.sfa,gl:a.gl,omega3:a.omega3,omega6:a.omega6}}]),Y()}catch(a){r($,`Error adding existing item: ${a.message}`),console.error(a)}finally{r(pe,!1)}}function pt(t){r(V,""),r(le,[]),r(he,!1),r(n,[...e(n),{name:t.trim(),quantity:100,unit:"g",status:"idle",isManuallyAdded:!0,nutrition:null}])}function je(){Ft().then(Y)}async function gt(){var l;const t=e(n).map((i,o)=>({ingredient:i,originalIndex:o})).filter(({ingredient:i})=>!i.id&&i.status==="idle");if(t.length===0){await He(),e(n).every(i=>i.status==="done")&&r(ue,"All ingredients ready.");return}if(r(R,!0),r($,""),r(ue,""),!de){r($,"Gemini API Key is missing. Please enter and save it below."),r(xe,!0),r(R,!1);return}const a=new Be({apiKey:de});try{const i=t.map(async({ingredient:b,originalIndex:E})=>{var S,C,y,s,P,u;const Q=e(n)[E];Q&&(Q.status="processing"),r(n,[...e(n)]);const{name:A,quantity:K,unit:J}=b;if(!A||K===void 0||K===null||!J)throw{originalIndex:E,reason:`Missing data (name, quantity, or unit) for ingredient at original index ${E}`};try{const _=J==="dl"?"dl":J==="pcs"?"pcs":J==="portion"?"portion":"g",N=_==="dl"||_==="pcs"||_==="portion"?1:100,w=K/N,x=`Provide nutritional information per ${N} ${_} for the food item "${A}". For 'carbs', report carbohydrates excluding fiber. If sources do not provide a value, you MUST estimate it from best guess. If assumptions are needed, include only the most important ones in the 'comment' field prefixed with "Assumptions: ". Be brief. Do not include source references or citations. Return only a valid JSON object matching this structure:
{
              "protein": number | null, "fat": number | null, "carbs": number | null,
              "fibers": number | null, "sugar": number | null, "mufa": number | null,
              "pufa": number | null, "sfa": number | null, "gl": number | null,
              "omega3": number | null, "omega6": number | null, "comment"?: string | null
            }`,z=((P=(s=(y=(C=(S=(await a.models.generateContent({model:"gemini-2.5-pro-preview-03-25",contents:[{role:"user",parts:[{text:x}]}],config:{tools:[{googleSearch:{}}],thinkingConfig:{includeThoughts:!1}}})).candidates)==null?void 0:S[0])==null?void 0:C.content)==null?void 0:y.parts)==null?void 0:s[0])==null?void 0:P.text)||"";if(!z)throw new Error("AI response for nutrition did not contain text.");let p;const ee=/.*(\{[\s\S]*\})/s,W=z.match(ee);if(!W||!W[1])throw new Error("AI nutrition response JSON structure not found.");try{p=JSON.parse(W[1])}catch(me){throw console.error("Failed to parse nutrition JSON:",me,`
Original Response:`,z),new Error("AI nutrition response JSON invalid.")}Oe(typeof p.omega6=="number"||p.omega6===null,`Omega 6 from AI must be a number or null, got type: ${typeof p.omega6}, value: ${p.omega6}`),Oe(typeof p.omega3=="number"||p.omega3===null,`Omega 3 from AI must be a number or null, got type: ${typeof p.omega3}, value: ${p.omega3}`);const D={name:A,serving_qty:N,serving_unit:_,protein:p.protein??null,fat:p.fat??null,carbs:p.carbs??null,fibers:p.fibers??null,sugar:p.sugar??null,mufa:p.mufa??null,pufa:p.pufa??null,sfa:p.sfa??null,gl:p.gl??null,omega3:p.omega3??null,omega6:p.omega6??null,comment:((u=p.comment)==null?void 0:u.trim())||null},{data:L,error:B}=await Se.from("food_items").insert([D]).select("id").single();if(B)throw B;if(!L)throw new Error("Failed to insert new food item on retry, no ID returned.");return{status:"fulfilled",originalIndex:E,id:L.id,multiplier:w,serving_qty:N,serving_unit:_,nutrition:{protein:D.protein,fat:D.fat,carbs:D.carbs,fibers:D.fibers,sugar:D.sugar,mufa:D.mufa,pufa:D.pufa,sfa:D.sfa,gl:D.gl,omega3:D.omega3,omega6:D.omega6}}}catch(_){throw console.error(`Error processing new ingredient "${A}" (original index ${E}):`,_),{originalIndex:E,reason:_ instanceof Error?_.message:String(_)}}}),o=await Promise.allSettled(i),c=e(n).map((b,E)=>{const Q=o.find(A=>A.status==="fulfilled"?A.value.originalIndex===E:A.reason.originalIndex===E);if(!Q)return console.warn(`No result found for original index ${E}, returning original ingredient state.`),b;if(Q.status==="fulfilled"){const A=Q.value;return{...b,id:A.id,multiplier:A.multiplier,serving_qty:A.serving_qty,serving_unit:A.serving_unit,status:"done",nutrition:A.nutrition,errorMsg:void 0}}else{const A=Q.reason;return{...b,status:"error",errorMsg:A.reason}}});r(n,c),Y();const m=e(n).filter(b=>b.status==="error");if(m.length>0){const b=m.map(E=>`${E.name||`Item at index ${e(n).indexOf(E)}`}: ${E.errorMsg}`).join("; ");throw new Error(`Failed to process ${m.length} new ingredient(s): ${b}`)}await He();const h=e(n).filter(b=>b.status==="error");if(h.length>0)throw new Error(`Failed to fetch nutrition for ${h.length} existing ingredient(s). Check individual items for details.`);e(n).every(b=>b.status==="done")?r(ue,"All ingredients processed successfully. Ready to create recipe."):console.warn("Processing finished, but not all items are 'done'. Check for errors.")}catch(i){(l=i.message)!=null&&l.includes("API key not valid")?(r($,"Gemini API Key is invalid. Please check and save it again."),r(xe,!0)):r($,`Error processing ingredients: ${i.message}`),console.error(i)}finally{r(R,!1)}}async function He(){const t="protein, fat, carbs, fibers, sugar, mufa, pufa, sfa, gl, omega3, omega6",a=e(n).filter(l=>l.id&&l.status==="idle").map(l=>l.id);if(a.length!==0){r(pe,!0),r($,"");try{const{data:l,error:i}=await Se.from("food_items").select(`id, ${t}`).in("id",a);if(i)throw new Error(`Failed to fetch nutrition for existing items: ${i.message}`);let o=!1;for(let c=0;c<e(n).length;c++){const m=e(n)[c];if(m.id&&m.status==="idle"){const h=l==null?void 0:l.find(b=>b.id===m.id);h?(rt(n,e(n)[c]={...m,nutrition:{protein:h.protein,fat:h.fat,carbs:h.carbs,fibers:h.fibers,sugar:h.sugar,mufa:h.mufa,pufa:h.pufa,sfa:h.sfa,gl:h.gl,omega3:h.omega3,omega6:h.omega6},status:"done"}),o=!0):(m.status="error",m.errorMsg=`Nutrition data not found for existing item ID ${m.id}`,o=!0)}}o&&(r(n,[...e(n)]),Y())}catch(l){r($,l.message);let i=!1;for(let o=0;o<e(n).length;o++){const c=e(n)[o];c.id&&a.includes(c.id)&&c.status==="idle"&&(c.status="error",c.errorMsg=`Failed to fetch nutrition: ${l.message}`,i=!0)}throw i&&(r(n,[...e(n)]),Y()),l}finally{r(pe,!1)}}}async function vt(){if(!e(Te)){r($,"Cannot create recipe: Ensure all ingredients are processed successfully (status 'done') and have no errors.");return}r(R,!0),r($,""),r(ue,"");try{const t=e(n).filter(o=>o.status==="done").map(o=>{const c=o.matchedName||o.name||"Unknown",m=o.serving_qty||"?",h=o.serving_unit||"unit",b=o.multiplier||1;return`${Number.isInteger(b)?b:b.toFixed(2)}x ${c} (${m} ${h})`}).join(", "),a=e(Ne)?`${e(Ne)}
---
Ingredients: ${t}`:`Ingredients: ${t}`,l={name:e(Ae).trim(),serving_qty:1,serving_unit:"portion",comment:a,protein:e(I).protein??null,fat:e(I).fat??null,carbs:e(I).carbs??null,fibers:e(I).fibers??null,sugar:e(I).sugar??null,mufa:e(I).mufa??null,pufa:e(I).pufa??null,sfa:e(I).sfa??null,gl:e(I).gl??null,omega3:e(I).omega3??null,omega6:e(I).omega6??null},{error:i}=await Se.from("food_items").insert([l]);if(i)throw i;r(ue,`Recipe "${e(Ae)}" created successfully!`),r(n,[]),Y()}catch(t){r($,`Error saving recipe: ${t.message}`),console.error(t)}finally{r(R,!1)}}async function bt(t){var m,h,b,E,Q,A;const a=e(n)[t];if(!a||a.status!=="error")return;if(console.log(`Retrying ingredient at index ${t}:`,a.name||a.matchedName),a.status="processing",a.errorMsg=void 0,r(n,[...e(n)]),!de){a.status="error",a.errorMsg="API Key missing for retry.",r(n,[...e(n)]),r(xe,!0);return}const{name:l,quantity:i,unit:o}=a;if(!l||!i||!o){a.status="error";const K=a.name||a.matchedName||`Item at index ${t}`;a.errorMsg=`Cannot retry ${K}: Missing original name, quantity, or unit.`,r(n,[...e(n)]);return}const c=new Be({apiKey:de});try{const K=o==="dl"?"dl":"g",J=K==="dl"?1:100,S=i/J,y=`Provide nutritional information per ${J} ${K} for the food item "${l}". For 'carbs', report total carbohydrates (including fiber). If assumptions are needed, include only the most important ones in the 'comment' field prefixed with "Assumptions: ". Be brief. Do not include source references or citations. Return only a valid JSON object matching this structure:
{ "protein": number | null, "fat": number | null, "carbs": number | null, "fibers": number | null, "sugar": number | null, "mufa": number | null, "pufa": number | null, "sfa": number | null, "gl": number | null, "omega3": number | null, "omega6": number | null, "comment"?: string | null }`,P=((Q=(E=(b=(h=(m=(await c.models.generateContent({model:"gemini-2.5-pro-preview-03-25",contents:[{role:"user",parts:[{text:y}]}],config:{tools:[{googleSearch:{}}],thinkingConfig:{includeThoughts:!1}}})).candidates)==null?void 0:m[0])==null?void 0:h.content)==null?void 0:b.parts)==null?void 0:E[0])==null?void 0:Q.text)||"";if(!P)throw new Error("AI response for nutrition did not contain text.");let u;const _=/.*(\{[\s\S]*\})/s,N=P.match(_);if(!N||!N[1])throw new Error("AI nutrition response JSON structure not found.");try{u=JSON.parse(N[1])}catch(T){throw console.error("Failed to parse nutrition JSON on retry:",T,`
Original Response:`,P),new Error("AI nutrition response JSON invalid on retry.")}Oe(typeof u.omega6=="number"||u.omega6===null,`Omega 6 from AI (retry) must be a number or null, got type: ${typeof u.omega6}, value: ${u.omega6}`),Oe(typeof u.omega3=="number"||u.omega3===null,`Omega 3 from AI (retry) must be a number or null, got type: ${typeof u.omega3}, value: ${u.omega3}`);const w={name:l,serving_qty:J,serving_unit:K,protein:u.protein??null,fat:u.fat??null,carbs:u.carbs??null,fibers:u.fibers??null,sugar:u.sugar??null,mufa:u.mufa??null,pufa:u.pufa??null,sfa:u.sfa??null,gl:u.gl??null,omega3:u.omega3??null,omega6:u.omega6??null,comment:((A=u.comment)==null?void 0:A.trim())||null},{data:q,error:x}=await Se.from("food_items").insert([w]).select("id").single();if(x)throw x;if(!q)throw new Error("Failed to insert new food item on retry, no ID returned.");a.status="done",a.id=q.id,a.multiplier=S,a.serving_qty=J,a.serving_unit=K,a.nutrition={protein:w.protein,fat:w.fat,carbs:w.carbs,fibers:w.fibers,sugar:w.sugar,mufa:w.mufa,pufa:w.pufa,sfa:w.sfa,gl:w.gl,omega3:w.omega3,omega6:w.omega6},a.errorMsg=void 0}catch(K){console.error(`Retry failed for ingredient "${l}" (index ${t}):`,K),a.status="error",a.errorMsg=`Retry failed: ${K.message}`}finally{r(n,[...e(n)]),Y()}}at(()=>e(n),()=>{r(Ve,e(n).some(t=>!t.id&&t.status==="idle"))}),at(()=>e(n),()=>{r(Te,e(n).length>0&&!e(n).some(t=>t.status!=="done"))}),Mt(),St();var Je=mr();Ot(t=>{Pt.title="Generate Recipe"});var Ue=d(g(Je),2),Xe=d(g(Ue),2);$e(Xe),f(Ue);var Le=d(Ue,2),Ye=d(g(Le),2);Et(Ye),f(Le);var ke=d(Le,2),yt=g(ke);{var ht=t=>{var a=be("Generating List...");v(t,a)},xt=t=>{var a=be("Generate Ingredient List");v(t,a)};M(yt,t=>{e(j)?t(ht):t(xt,!1)})}f(ke);var We=d(ke,2);{var _t=t=>{var a=Lt(),l=d(g(a),2),i=g(l);$e(i);var o=d(i,2);f(l);var c=d(l,2);{var m=h=>{var b=Ut(),E=g(b,!0);f(b),F(()=>O(E,e($))),v(h,b)};M(c,h=>{e($)&&(e($).includes("API Key is missing")||e($).includes("API Key is invalid"))&&h(m)})}f(a),ye(i,()=>e(qe),h=>r(qe,h)),U("click",o,ut),v(t,a)};M(We,t=>{e(xe)&&t(_t)})}var Ze=d(We,2);{var wt=t=>{var a=Qt(),l=g(a,!0);f(a),F(()=>O(l,e($))),v(t,a)};M(Ze,t=>{e($)&&!(e($).includes("API Key is missing")||e($).includes("API Key is invalid"))&&t(wt)})}var et=d(Ze,2);{var It=t=>{var a=zt(),l=g(a,!0);f(a),F(()=>O(l,e(ue))),v(t,a)};M(et,t=>{e(ue)&&!e(R)&&t(It)})}var $t=d(et,2);{var At=t=>{var a=dr(),l=d(g(a),4);st(l,5,()=>e(n),Kt,(y,s,P)=>{var u=tr();const _=X(()=>e(s).status==="processing"?"bg-yellow-50 border-yellow-200":e(s).status==="done"?"bg-green-50 border-green-200":e(s).status==="error"?"bg-red-50 border-red-200":"bg-white border-gray-200");var N=g(u),w=g(N),q=g(w);{var x=p=>{var ee=Bt();const W=X(()=>e(s).matchedName||e(s).name||"Unknown Item"),D=X(()=>e(s).serving_qty||"?"),L=X(()=>e(s).serving_unit||"unit");var B=oe(ee),me=g(B);f(B);var ge=d(B,2);$e(ge),F(()=>{O(me,`${e(W)??""} (${e(D)??""} ${e(L)??""}) x`),ge.disabled=e(R)||e(j)}),ye(ge,()=>e(s).multiplier,te=>(e(s).multiplier=te,Ee(()=>e(n)))),U("input",ge,je),v(p,ee)},T=(p,ee)=>{{var W=L=>{var B=Ht(),me=oe(B);{var ge=H=>{var re=Vt(),Me=oe(re);ie(),F(()=>O(Me,`${e(s).quantity??""}${e(s).unit??""} ${e(s).name??""} `)),v(H,re)},te=H=>{var re=be();F(()=>O(re,`${e(s).matchedName??""} (${e(s).serving_qty||"?"} ${e(s).serving_unit||"unit"}) x ${e(s).multiplier??""}`)),v(H,re)};M(me,H=>{e(s).id?H(te,!1):H(ge)})}ie(2),v(L,B)},D=(L,B)=>{{var me=te=>{var H=Yt(),re=oe(H);{var Me=ae=>{var fe=Xt(),Re=oe(fe);ie(),F(()=>O(Re,`${e(s).quantity??""}${e(s).unit??""} ${e(s).name??""} `)),v(ae,fe)},Qe=ae=>{var fe=be();F(()=>O(fe,`${e(s).matchedName??""} (${e(s).serving_qty||"?"} ${e(s).serving_unit||"unit"}) x ${e(s).multiplier??""}`)),v(ae,fe)};M(re,ae=>{e(s).id?ae(Qe,!1):ae(Me)})}var ce=d(re,2),ve=d(ce,2);F(()=>{Tt(ce,"title",e(s).errorMsg),ve.disabled=e(R)}),U("click",ve,()=>bt(P)),v(te,H)},ge=te=>{var H=tt(),re=oe(H);{var Me=ce=>{var ve=Wt();const ae=X(()=>e(s).matchedName||`Item ID: ${e(s).id}`),fe=X(()=>e(s).serving_qty||"?"),Re=X(()=>e(s).serving_unit||"unit");var se=oe(ve),_e=g(se);f(se);var Z=d(se,2);$e(Z),ie(2),F(()=>{O(_e,`${e(ae)??""} (${e(fe)??""} ${e(Re)??""}) x`),Z.disabled=e(R)||e(j)}),ye(Z,()=>e(s).multiplier,ne=>(e(s).multiplier=ne,Ee(()=>e(n)))),U("input",Z,je),v(ce,ve)},Qe=ce=>{var ve=tt(),ae=oe(ve);{var fe=se=>{var _e=Zt(),Z=oe(_e);$e(Z);var ne=d(Z,2);F(()=>{e(s),Ee(()=>{e(R),e(j)})});var Pe=g(ne);Pe.value=Pe.__value="g";var we=d(Pe);we.value=we.__value="dl";var Fe=d(we);Fe.value=Fe.__value="pcs";var Ie=d(Fe);Ie.value=Ie.__value="portion",f(ne);var Ke=d(ne,2),Nt=g(Ke,!0);f(Ke),ie(2),F(()=>{Z.disabled=e(R)||e(j),ne.disabled=e(R)||e(j),O(Nt,e(s).name)}),ye(Z,()=>e(s).quantity,ze=>(e(s).quantity=ze,Ee(()=>e(n)))),Dt(ne,()=>e(s).unit,ze=>(e(s).unit=ze,Ee(()=>e(n)))),v(se,_e)},Re=se=>{var _e=er();const Z=X(()=>e(s).name||"Unknown New Item"),ne=X(()=>e(s).unit==="dl"?"dl":"g"),Pe=X(()=>e(ne)==="dl"?1:100);var we=oe(_e),Fe=g(we);f(we);var Ie=d(we,2);$e(Ie),ie(2),F(()=>{O(Fe,`${e(Z)??""} (${e(Pe)??""} ${e(ne)??""}) x`),Ie.disabled=e(R)||e(j)}),ye(Ie,()=>e(s).multiplier,Ke=>(e(s).multiplier=Ke,Ee(()=>e(n)))),U("input",Ie,je),v(se,_e)};M(ae,se=>{e(s).isManuallyAdded?se(fe):se(Re,!1)})}v(ce,ve)};M(re,ce=>{e(s).id?ce(Me):ce(Qe,!1)})}v(te,H)};M(L,te=>{e(s).status==="error"?te(me):te(ge,!1)},B)}};M(p,L=>{e(s).status==="processing"?L(W):L(D,!1)},ee)}};M(q,p=>{e(s).status==="done"?p(x):p(T,!1)})}f(w);var z=d(w,2);f(N),f(u),F(()=>{Ct(u,1,`p-2 border rounded ${e(_)}`),z.disabled=e(R)}),U("click",z,()=>mt(P)),v(y,u)}),f(l);var i=d(l,2),o=d(g(i),2);$e(o);var c=d(o,2);{var m=y=>{var s=rr();v(y,s)};M(c,y=>{e(pe)&&y(m)})}var h=d(c,2);{var b=y=>{var s=or(),P=g(s);st(P,1,()=>e(le),q=>q.item.id,(q,x)=>{var T=ar(),z=g(T),p=d(z),ee=g(p);f(p),f(T),F(()=>{O(z,`${e(x).item.name??""} `),O(ee,`(${e(x).item.serving_qty||"?"} ${e(x).item.serving_unit||"unit"})`)}),U("mousedown",T,()=>ft(e(x).item)),v(q,T)});var u=d(P,2);{var _=q=>{var x=sr(),T=g(x);f(x),F(z=>O(T,`Add "${z??""}" as a new item (default 100g)`),[()=>e(V).trim()],X),U("mousedown",x,()=>pt(e(V))),v(q,x)};M(u,q=>{e(V).trim()&&!e(le).some(x=>x.item.name.toLowerCase()===e(V).trim().toLowerCase())&&q(_)})}var N=d(u,2);{var w=q=>{var x=nr();v(q,x)};M(N,q=>{e(le).length===0&&!e(V).trim()&&q(w)})}f(s),v(y,s)};M(h,y=>{e(he)&&(e(le).length>0||e(V).trim())&&y(b)})}f(i);var E=d(i,2);{var Q=y=>{var s=ir(),P=g(s),u=g(P);f(P);var _=d(P,2),N=g(_),w=g(N);f(N);var q=d(N,2),x=g(q);ie(),f(q);var T=d(q,2),z=g(T);ie(),f(T);var p=d(T,2),ee=g(p);ie(),f(p);var W=d(p,2),D=g(W);ie(),f(W);var L=d(W,2),B=g(L);f(L),f(_),f(s),F(me=>{O(u,`Recipe Summary (${e(I).count??""} ingredients)`),O(w,`${me??""} C`),O(x,`${e(I).protein??0??""}, ${e(I).fat??0??""}, ${e(I).carbs??0??""} `),O(z,`${e(I).fibers??0??""}, ${e(I).sugar??0??""} `),O(ee,`${e(I).mufa??0??""}, ${e(I).pufa??0??""}, ${e(I).sfa??0??""} `),O(D,`${e(I).ratio??"-"??""} `),O(B,`${e(I).gl??0??""} GL`)},[()=>jt(e(I))],X),v(y,s)};M(E,y=>{e(I).count>0&&y(Q)})}var A=d(E,2),K=g(A);{var J=y=>{var s=lr(),P=g(s);{var u=N=>{var w=be("Processing New Items...");v(N,w)},_=N=>{var w=be("Fetch & Add New Ingredients");v(N,w)};M(P,N=>{e(R)?N(u):N(_,!1)})}f(s),F(()=>s.disabled=e(j)||e(R)),U("click",s,gt),v(y,s)},S=(y,s)=>{{var P=u=>{var _=ur(),N=g(_);{var w=x=>{var T=be("Saving Recipe...");v(x,T)},q=x=>{var T=be("Create Recipe");v(x,T)};M(N,x=>{e(R)?x(w):x(q,!1)})}f(_),F(()=>_.disabled=e(j)||e(R)),U("click",_,vt),v(u,_)};M(y,u=>{e(Te)&&u(P)},s)}};M(K,y=>{e(Ve)?y(J):y(S,!1)})}var C=d(K,2);f(A),f(a),F(()=>{o.disabled=e(pe)||e(R)||e(j),C.disabled=e(j)||e(R)}),ye(o,()=>e(V),y=>r(V,y)),U("input",o,ct),U("focus",o,()=>r(he,!0)),U("blur",o,()=>setTimeout(()=>r(he,!1),150)),U("click",C,()=>{r(n,[]),r($,""),r(ue,""),Y()}),v(t,a)};M($t,t=>{e(n).length>0&&t(At)})}f(Je),F(()=>ke.disabled=!e(Ae)||e(j)||e(R)),ye(Xe,()=>e(Ae),t=>r(Ae,t)),ye(Ye,()=>e(Ne),t=>r(Ne,t)),U("click",ke,dt),v(nt,Je),Rt()}export{$r as component};
